class Solution {
  	hasPathSum(root,S){
  	    if(!root.left && !root.right && root.key === S)
  	        return true;
  	    return this.utility(root.left, S, root.key) || this.utility(root.right, S, root.key);
  	}
  	
  	utility(root, S, total) {
  	    if(!root)
  	        return false;
  	    if(!root.left && !root.right){
  	        if(root.key + total === S)
  	            return true;
  	        return false;
  	    } 
  	    return this.utility(root.left, S, root.key + total) || this.utility(root.right, S, root.key + total);
  	}
}


class Solution
{
    public:
    bool hasPathSum(Node *root, int S) {
        if(!root) return 0;
        if(!root->left && !root->right)
        {
            if(S-root->data ==0) return true;
            else return false;
        }
        return hasPathSum(root->left, S-root->data) 
            || hasPathSum(root->right, S-root->data);

    }
};
